/* NOTES
   PI USB baudrate bandwidth is 115200 / 10 = 14,400

   32*200 = 6,400 pulses per revolution, 1 revolution is 360 degrees
   32*200 PPR / 360 DPR = 17.8 pulses / degree
   
   Simple testing shows we can round trip, pi to pico and back to pi, 13,597
   characters per second, See PICom.py and PICOCom.py.

   2.1245 second run, 28890 chars = 13,597 chars/ second
   I would like to send 250 X 4 bytes per second minimum if we can send raw
   data. Looks like plenty of bandwidth for the.

   A second test which removed the print during the run had a result of 15,341
   chars/second.

   We need to tune the PIO rate based on the required maximum PPS we select.
   
   USB connection speed conclusion:

   - Sinced our rate is 14k to 15k bytes per second we could even send data as
     text. For example "0xffff0xf0123\n" which is only 3,500 chars per second at
     250hz rate.

   - Decided to use format "x8120y8120", since it takes minimal
     processing on PICO side but does have some level of error
     detection. Used 'x' and 'y' since they do not collide with hex
     values. 'x' is for sma, state machine a, 'y' is for smb, , state
     machine a

   800 pulses per second is 0.00125 second delay
   25  pulses per second is 0.04000 second delay
   If delay unit 1 is 0.00125 to get 0.04 we need 32 unit delay

   I would prefer being closer to:
   1 degree or less per second minimum speed
   1/4 revolution or 1600 PPS maximum

   fast = delay of 0.000625 seconds = 1600 PPS or 1/4 revolutions per second 
   slow = delay of 0.056 seconds = 17.7 pulses per second = 1 degree per second

   That means for minimum speed I need a delay of 17.7 pps or 0.056
   seconds per pulse since we are running at 250 Hz that is a minimum
   of 250 pps. We could get around that by having delays that take
   longer that 0.004 seconds
   
   Method to handle long delays.

   Just use the requested delay and when finished delaying based on
   that data even if greater than the 0.04 time, pull data from the
   input buffer until it is empty and then use the last value we
   pulled. In the larger than 0.004 case the buffer would have extra
   data and we are assuming the sender can buffer some data
   automatically.
                  
                      
                
